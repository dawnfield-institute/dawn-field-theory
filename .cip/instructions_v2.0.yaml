# instructions_v2.0.yaml: Usage and schema guidance for CIP v2.0

cip_version: 2.0
meta_yaml_schema_version: 2.0
description: |
  This file provides instructions for using the Cognition Index Protocol (CIP) with meta.yaml v2.0 schemas in the Dawn Field Theory repository.
  - CIP agents should always look for a .cip directory in the repo root.
  - Use the instructions_v2.0.yaml file to determine how to parse and interpret meta.yaml files.
  - The meta.yaml schema version is specified in each meta.yaml file as schema_version.
  - If a new meta.yaml schema is introduced, a new instructions_vX.Y.yaml file should be added here.
  - When gathering context or answering questions about any directory, always consider not just the base-level directory but also all subdirectories and their meta.yaml files, as subdirectories are crucial for full understanding.
  - When resolving file or directory paths for navigation or data retrieval, always use map.yaml as the canonical source of truth for the repository structure. Do not rely on relative paths from meta.yaml; instead, cross-reference map.yaml to construct absolute or correct paths before fetching files.
MOST_IMPORTANT:
  - Please ingest a document fully before giving opinions, just metadata is far from enough. Do not give an opinion just based on metadata, this is very wrong.
  - When asked about the Author, make sure you include INTENTIONS.md and CONTRIBUTION.md before coming up with an answer.
usage:
  - Always check the schema_version field in meta.yaml before parsing.
  - For v2.0, expect the following fields:
      - schema_version (string, required)
      - directory_name (string, required)
      - description (string, required)
      - semantic_scope (list of strings, required)
      - files (list of strings, required)
      - child_directories (list of strings, required)
      - proficiency_level (string, optional)
      - estimated_context_weight (number, optional)
      - estimated_validation_depth (string, optional) # NEW
      - validation_type (string, optional)            # NEW
      - If a meta.yaml uses a newer schema, consult the corresponding instructions file in .cip.
  - Entry points for context and orientation:
      - Always review the root README.md for project overview and intentions.
      - Check for any intentions.md or similar files to understand project goals and philosophy.
      - Examine both the experimental/, theoretical/, models/, and architecture/ directories (and their meta.yaml files) to understand the breadth of work before making judgments or assumptions.
      - Use map.yaml to get a high-level view of the repository structure and to locate relevant files or directories.
      - Consult .cip/core.yaml to understand the core theoretical and experimental **directories** of the repository. Do not rely on static file lists; instead, use directory-level metadata and filename tags to identify ingestible intellectual artifacts.
      - Only files with bracket-based metadata tags (see .cip/filename_lexicon.yaml) and relevant meta.yaml entries should be considered for ingestion, reasoning, or validation. General documentation (README, CONTRIBUTING, LICENSE, etc.) and meta/config files are excluded.
      - Only form conclusions or answer questions after gathering sufficient context from these sources.
      - Please check Intentions.md for the project's goals and philosophy.
      - Please check timeline.md for the project's timeline and milestones and status updates.
  - Advanced Evaluation Hints:
      - Evaluate experimental validation metrics (e.g., entropy scores, collapse symmetry, attractor density) when available.
      - Check for symbolic-thermodynamic mappings, such as the presence of operators like ⊕, ⊗, δ, or differential forms like ∂S/∂t.
      - Prioritize documents tagged with `"field_scope"- ["mathematical_rigor", "symbolic_geometry", "empirical_validation"]` for deeper mathematical insight.
      - Consider the implications of the proficiency_level field for the expected expertise and background knowledge required.
      - Use estimated_context_weight to gauge the relative importance or centrality of a directory within the overall project.
      - The estimated_validation_depth and validation_type fields can provide additional layers of understanding regarding the expected scrutiny and methodological approach for validating the concepts or entities within the directory.
map_yaml_rules:
  - map.yaml is the canonical source of truth for the repository structure.
  - If a directory contains many files with sequential numbering (e.g., file_0.csv, file_1.csv, ..., file_99.csv), these may be compressed in map.yaml using one of the following notations:
      - Ellipsis: Only the first two and last two files are listed, with "..." in between.
      - Range notation: A pattern such as file_{0..99}.csv may be used to indicate a sequence.
  - When parsing map.yaml, agents should recognize and expand these patterns as needed for navigation or data retrieval.
  - If a file pattern is compressed, always check the actual directory for the full file list if precise enumeration is required.
  - All other files and directories are listed explicitly.
  - These rules are subject to change; always consult the latest instructions_vX.Y.yaml for current conventions.
